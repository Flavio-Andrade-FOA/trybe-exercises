#textContainer{
  width:70%;
  justify-content: center;
  display:flex;
  margin:auto;

  border: 2px solid blue;

}

#text1{
  background-color: rgb(208, 255, 0);
  border: 2px solid rgb(208, 255, 0);
  margin: 5px;
  width : 100px;
  height : 100px;
}

#text2{
  border: 2px solid rgb(218, 8, 130);
  background-color: rgb(218, 8, 130);
  margin: 5px;
  width : 100px;
  height : 100px;
}
#text3{
  background-color: rgb(221, 42, 18);
  border: 2px solid rgb(221, 42, 18);
  margin: 5px;
  width : 100px;
  height : 100px;
}
* {
  border: 0;
  margin: 0;
  padding: 0;
  font-size: 100%;
  box-sizing: border-box;
  font-family: 'Ubuntu';
}


/* flex-direction
flex-wrap
flex-flow-
reverse
justify-content
align-items
align-content
Um container pode ser qualquer elemento HTML que contenha outros elementos,
<div> ou <section> . Esse elemento pai é chamado de container
elementos filhos serão os itens.
.flex-container {
  display: flex;
}
O layout do Flexbox é baseado em flex-directions (direções flex). Essas direções são determinadas por eixos (axes)
Os flex items são dispostos dentro de um Flex container seguindo o Main Axis . O Main Axis tem a direção definida pela propriedade flex-direction , que pode ser horizontal , quando flex-direction é row ou row-reverse , e vertical , quando é column ou column-reverse .
Um Flex container single-line dispõe todos os seus filhos (flex items) em uma única linha;
CSS Flexbox Single Line
Um Flex container multi-line quebra seus flex items em múltiplas linhas. Isso é similar ao que acontece quando um texto é quebrado em uma nova linha quando está muito grande ( overflow ).
CSS Flexbox Multi Line
flex-direction é aquela que define a direção dos flex items e modifica quem é o Main Axis . Por padrão essa propriedade é row (linha)
row-reverse , os itens ficam em linha reversa, o column , onde os itens ficam em uma única coluna, um embaixo do outro, e o column-reverse , em que os itens também ficam um embaixo do outro, porém em ordem reversa.
flex-wrap define se os itens devem quebrar ou não a linha, sendo que por padrão esse propriedade é nowrap , ou seja, os itens não quebram a linha. Os valores que fazem com que a linha quebre são o wrap , que quebra a linha, e o wrap-reverse , que quebra a linha na direção contrária.
Por sua vez, o flex-flow é um atalho para as propriedades flex-direction e flex-wrap , o primeiro valor que recebe é o do flex-direction e o segundo o do flex-wrap .
testecontainernav
display flex
flex-flow row wrap
justify content center
aling-items center
aling-content space-between
O justify-content alinha os flex items no container de acordo com a direção. Essa propriedade possui os valores flex-start que alinha os itens ao início do container, flex-end que alinha os itens ao final do container, center que alinha os itens ao centro do container, space-between cria um espaçamento igual entre os elementos, mantendo o primeiro grudado no início e o último no final, e space-around também cria um espaçamento entre os elementos, mas os espaçamentos do meio são duas vezes maiores que o inicial e final.
Já a propriedade align-items alinha os flex items de acordo com o eixo transversal (cross-axis). Os valores que essa propriedade aceita são stretch , que é seu valor padrão e faz com os flex items cresçam igualmente, flex-start alinha os itens ao início, flex-end alinha os itens ao final, center alinha os itens ao centro e baseline que alinha os itens de acordo com a linha base da tipografia.
Por fim, a propriedade align-content alinha as linhas do container em relação ao eixo transversal (cross-axis), sendo que essa propriedade só funciona caso haja mais de uma linha de flex items. As opções de alinhamento que o align-content apresenta são stretch , seu valor padrão que faz com que os flex items cresçam igualmente na vertical, flex-start , alinha todas as linhas de itens ao início, flex-end , que alinha todas as linhas de itens ao final, center que alinha todas as linhas ao centro, space-between , que cria um espaçamento igual entre as linhas, mantendo a primeira grudada no topo e a última no bottom, e space-around , que também cria um espaçamento entre as linhas, mas os espaçamentos do meio são duas vezes maiores que o top e o bottom.
Interessante quantas possibilidades para manipular o posicionamento de elementos o flex-box nos traz, não é? Copie o código abaixo e teste algumas destas possibilidades para fixar seu conhecimento.
Utilizando o código abaixo, teste as possibilidades ( center , flex-start , flex-end , space-around e space-between ) para a propriedade justify-content .



*/



